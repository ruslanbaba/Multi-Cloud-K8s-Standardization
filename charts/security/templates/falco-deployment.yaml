apiVersion: v1
kind: Namespace
metadata:
  name: security-system
  labels:
    security.k8s.io/runtime-monitoring: "enabled"
    pod-security.kubernetes.io/enforce: "restricted"
    pod-security.kubernetes.io/audit: "restricted"
    pod-security.kubernetes.io/warn: "restricted"

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: falco
  namespace: security-system
  labels:
    app: falco
    security.tool: runtime-monitoring
spec:
  selector:
    matchLabels:
      app: falco
  template:
    metadata:
      labels:
        app: falco
        security.tool: runtime-monitoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8765"
    spec:
      serviceAccountName: falco
      securityContext:
        runAsNonRoot: false  # Required for kernel module access
        runAsUser: 0
        fsGroup: 0
      hostNetwork: true
      hostPID: true
      hostIPC: true
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
      containers:
      - name: falco
        image: falcosecurity/falco-no-driver:0.35.1
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          capabilities:
            add:
              - SYS_ADMIN
              - SYS_RESOURCE
              - SYS_PTRACE
        args:
          - /usr/bin/falco
          - --cri=/run/containerd/containerd.sock
          - --cri=/run/crio/crio.sock
          - --k8s-api
          - --k8s-api-certificate=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          - --k8s-api-token=/var/run/secrets/kubernetes.io/serviceaccount/token
        env:
        - name: FALCO_GRPC_ENABLED
          value: "true"
        - name: FALCO_GRPC_BIND_ADDRESS
          value: "0.0.0.0:5060"
        - name: FALCO_HTTP_OUTPUT_ENABLED
          value: "true"
        - name: FALCO_HTTP_OUTPUT_URL
          value: "http://falco-exporter:9376/webhook"
        volumeMounts:
        - mountPath: /host/var/run/docker.sock
          name: docker-socket
        - mountPath: /host/run/containerd/containerd.sock
          name: containerd-socket
        - mountPath: /host/run/crio/crio.sock
          name: crio-socket
        - mountPath: /host/dev
          name: dev-fs
          readOnly: true
        - mountPath: /host/proc
          name: proc-fs
          readOnly: true
        - mountPath: /host/boot
          name: boot-fs
          readOnly: true
        - mountPath: /host/lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /host/usr
          name: usr-fs
          readOnly: true
        - mountPath: /host/etc
          name: etc-fs
          readOnly: true
        - mountPath: /etc/falco
          name: falco-config
        - mountPath: /etc/falco/rules.d
          name: falco-rules
        resources:
          requests:
            cpu: 100m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8765
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8765
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: containerd-socket
        hostPath:
          path: /run/containerd/containerd.sock
      - name: crio-socket
        hostPath:
          path: /run/crio/crio.sock
      - name: dev-fs
        hostPath:
          path: /dev
      - name: proc-fs
        hostPath:
          path: /proc
      - name: boot-fs
        hostPath:
          path: /boot
      - name: lib-modules
        hostPath:
          path: /lib/modules
      - name: usr-fs
        hostPath:
          path: /usr
      - name: etc-fs
        hostPath:
          path: /etc
      - name: falco-config
        configMap:
          name: falco-config
      - name: falco-rules
        configMap:
          name: falco-rules

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: falco
  namespace: security-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: falco
rules:
- apiGroups: [""]
  resources: ["nodes", "namespaces", "pods", "replicationcontrollers", "replicasets", "services", "daemonsets", "deployments", "events", "configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["daemonsets", "deployments", "replicasets"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: falco
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: falco
subjects:
- kind: ServiceAccount
  name: falco
  namespace: security-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-config
  namespace: security-system
data:
  falco.yaml: |
    rules_file:
      - /etc/falco/falco_rules.yaml
      - /etc/falco/falco_rules.local.yaml
      - /etc/falco/k8s_audit_rules.yaml
      - /etc/falco/rules.d
    
    time_format_iso_8601: false
    json_output: true
    json_include_output_property: true
    json_include_tags_property: true
    
    log_stderr: true
    log_syslog: true
    log_level: info
    
    priority: debug
    
    buffered_outputs: false
    
    syscall_event_drops:
      actions:
        - log
        - alert
      rate: 0.03333
      max_burst: 1000
    
    outputs:
      rate: 1
      max_burst: 1000
    
    syslog_output:
      enabled: true
    
    file_output:
      enabled: false
    
    stdout_output:
      enabled: true
    
    webserver:
      enabled: true
      listen_port: 8765
      k8s_healthz_endpoint: /healthz
      ssl_enabled: false
      ssl_certificate: /etc/ssl/falco/falco.crt
      ssl_private_key: /etc/ssl/falco/falco.key
    
    program_output:
      enabled: false
      keep_alive: false
      program: "jq '{text: .output}' | curl -d @- -X POST https://hooks.slack.com/services/XXX"
    
    http_output:
      enabled: true
      url: "http://falco-exporter:9376/webhook"
      user_agent: "falcosecurity/falco"
    
    grpc:
      enabled: true
      bind_address: "0.0.0.0:5060"
      threadiness: 0
    
    grpc_output:
      enabled: true

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-rules
  namespace: security-system
data:
  custom_rules.yaml: |
    # Custom security rules for Kubernetes
    - rule: Suspicious Container Activity
      desc: Detect suspicious activity in containers
      condition: >
        spawned_process and container and
        (proc.name in (nc, ncat, netcat, nmap, dig, nslookup, tcpdump) or
         proc.cmdline contains "wget" or
         proc.cmdline contains "curl" or
         proc.cmdline contains "python -c" or
         proc.cmdline contains "perl -e" or
         proc.cmdline contains "ruby -e")
      output: >
        Suspicious activity detected (user=%user.name command=%proc.cmdline 
        container=%container.name image=%container.image.repository)
      priority: WARNING
      tags: [container, suspicious]
    
    - rule: Privilege Escalation Attempt
      desc: Detect privilege escalation attempts
      condition: >
        spawned_process and container and
        (proc.name in (sudo, su, runuser, newgrp, sg) or
         proc.cmdline contains "chmod +s" or
         proc.cmdline contains "setuid" or
         proc.cmdline contains "setgid")
      output: >
        Privilege escalation attempt (user=%user.name command=%proc.cmdline 
        container=%container.name)
      priority: CRITICAL
      tags: [privilege_escalation, container]
    
    - rule: Cryptocurrency Mining Activity
      desc: Detect cryptocurrency mining
      condition: >
        spawned_process and container and
        (proc.name in (xmrig, xmr-stak, cpuminer, t-rex, excavator, phoenix, bminer) or
         proc.cmdline contains "stratum" or
         proc.cmdline contains "mining" or
         proc.cmdline contains "pool.supportxmr.com")
      output: >
        Cryptocurrency mining detected (user=%user.name command=%proc.cmdline 
        container=%container.name)
      priority: CRITICAL
      tags: [mining, container]
    
    - rule: Container Breakout Attempt
      desc: Detect container breakout attempts
      condition: >
        spawned_process and container and
        (proc.name in (docker, runc, kubectl, crictl) or
         proc.cmdline contains "/proc/self/exe" or
         proc.cmdline contains "release_agent" or
         proc.cmdline contains "mount -t cgroup")
      output: >
        Container breakout attempt (user=%user.name command=%proc.cmdline 
        container=%container.name)
      priority: CRITICAL
      tags: [breakout, container]
    
    - rule: Suspicious Network Activity
      desc: Detect suspicious network connections
      condition: >
        inbound_outbound and
        fd.type=ipv4 and
        (fd.sip.name contains ".onion" or
         fd.sport in (4444, 5555, 6666, 7777, 8888, 9999) or
         fd.dport in (4444, 5555, 6666, 7777, 8888, 9999))
      output: >
        Suspicious network activity (connection=%fd.name 
        src=%fd.sip:%fd.sport dst=%fd.dip:%fd.dport)
      priority: WARNING
      tags: [network, suspicious]

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: falco-exporter
  namespace: security-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: falco-exporter
  template:
    metadata:
      labels:
        app: falco-exporter
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: falco-exporter
        image: falcosecurity/falco-exporter:0.8.2
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        ports:
        - containerPort: 9376
          name: metrics
        - containerPort: 9376
          name: webhook
        args:
          - --web.listen-address=0.0.0.0:9376
          - --client.hostname=falco.security-system.svc.cluster.local
          - --client.port=5060
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9376
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9376
          initialDelaySeconds: 30
          periodSeconds: 10

---
apiVersion: v1
kind: Service
metadata:
  name: falco-exporter
  namespace: security-system
  labels:
    app: falco-exporter
spec:
  ports:
  - port: 9376
    targetPort: 9376
    name: metrics
  selector:
    app: falco-exporter

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: falco-exporter
  namespace: security-system
  labels:
    app: falco-exporter
spec:
  selector:
    matchLabels:
      app: falco-exporter
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: falcosidekick
  namespace: security-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: falcosidekick
  template:
    metadata:
      labels:
        app: falcosidekick
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1234
        fsGroup: 1234
      containers:
      - name: falcosidekick
        image: falcosecurity/falcosidekick:2.27.0
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        ports:
        - containerPort: 2801
          name: http
        env:
        - name: SLACK_WEBHOOKURL
          valueFrom:
            secretKeyRef:
              name: falco-secrets
              key: slack-webhook-url
        - name: SLACK_CHANNEL
          value: "#security-alerts"
        - name: SLACK_USERNAME
          value: "Falco"
        - name: SLACK_ICON
          value: ":shield:"
        - name: PAGERDUTY_ROUTINGKEY
          valueFrom:
            secretKeyRef:
              name: falco-secrets
              key: pagerduty-routing-key
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi

---
apiVersion: v1
kind: Service
metadata:
  name: falcosidekick
  namespace: security-system
spec:
  ports:
  - port: 2801
    targetPort: 2801
    name: http
  selector:
    app: falcosidekick