apiVersion: postgresql.acid.zalan.do/v1
kind: postgresql
metadata:
  name: acid-minimal-cluster
spec:
  teamId: "acid"
  volume:
    size: 100Gi
  numberOfInstances: 3
  users:
    app_user: []
  databases:
    app_db: app_user
  postgresql:
    version: "14"
  enableMasterPoolerLoadBalancer: true
  enableReplicaPoolerLoadBalancer: true
  
---
apiVersion: strimzi.io/v1beta2
kind: Kafka
metadata:
  name: event-streaming
spec:
  kafka:
    version: 3.3.1
    replicas: 3
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: route
        tls: true
    config:
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
    storage:
      type: jbod
      volumes:
      - id: 0
        type: persistent-claim
        size: 100Gi
        deleteClaim: false
  zookeeper:
    replicas: 3
    storage:
      type: persistent-claim
      size: 100Gi
      deleteClaim: false
  entityOperator:
    topicOperator: {}
    userOperator: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-security-config
data:
  postgres.conf: |
    # Connection Security
    ssl = on
    ssl_cert_file = '/etc/ssl/certs/server.crt'
    ssl_key_file = '/etc/ssl/private/server.key'
    ssl_ca_file = '/etc/ssl/certs/ca.crt'
    ssl_crl_file = '/etc/ssl/certs/server.crl'
    ssl_min_protocol_version = 'TLSv1.2'
    ssl_ciphers = 'ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS'
    ssl_prefer_server_ciphers = on
    
    # Authentication and Authorization
    password_encryption = 'scram-sha-256'
    log_connections = on
    log_disconnections = on
    log_checkpoints = on
    log_statement = 'all'
    log_min_duration_statement = 1000
    
    # Security Hardening
    shared_preload_libraries = 'pg_stat_statements,auto_explain,pg_cron'
    log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    
    # Connection Limits
    max_connections = 100
    superuser_reserved_connections = 3
    
    # Performance and Security
    effective_cache_size = '1GB'
    shared_buffers = '256MB'
    work_mem = '4MB'
    maintenance_work_mem = '64MB'
    
    # Audit and Compliance
    log_statement_stats = off
    log_parser_stats = off
    log_planner_stats = off
    log_executor_stats = off
    log_autovacuum_min_duration = 0

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: database-network-policy
spec:
  podSelector:
    matchLabels:
      app: postgresql
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          access: database
    ports:
    - protocol: TCP
      port: 5432
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # For external services (backups, monitoring)
    - protocol: UDP
      port: 53   # DNS

---
apiVersion: v1
kind: Secret
metadata:
  name: database-tls-secret
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTi... # base64 encoded certificate
  tls.key: LS0tLS1CRUdJTi... # base64 encoded private key
  ca.crt: LS0tLS1CRUdJTi...  # base64 encoded CA certificate

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup-encrypted
spec:
  schedule: "0 2 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            fsGroup: 999
          containers:
          - name: backup
            image: postgres:14-alpine
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                - ALL
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: password
            - name: ENCRYPTION_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-encryption-secret
                  key: encryption-key
            command:
            - /bin/sh
            - -c
            - |
              pg_dump -h postgres-service -U postgres -d myapp \
                --verbose --no-password --format=custom \
                | gpg --symmetric --cipher-algo AES256 --compress-algo 2 \
                      --passphrase "$ENCRYPTION_KEY" \
                > /backup/backup-$(date +%Y%m%d_%H%M%S).sql.gpg
            volumeMounts:
            - name: backup-storage
              mountPath: /backup
            - name: tmp
              mountPath: /tmp
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-pvc
          - name: tmp
            emptyDir: {}
          restartPolicy: OnFailure

---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: database-psp
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: true
