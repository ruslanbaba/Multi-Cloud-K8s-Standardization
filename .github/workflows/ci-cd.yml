name: 'CI/CD Pipeline'

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  TF_VERSION: '1.5.0'
  HELM_VERSION: '3.12.0'

jobs:
  validate:
    name: 'Validate'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: 'Terraform Format'
      run: terraform fmt -check -recursive

    - name: 'Terraform Init'
      run: terraform init -backend=false

    - name: 'Terraform Validate'
      run: terraform validate

    - name: 'Install tflint'
      run: |
        curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

    - name: 'Run tflint'
      run: tflint --recursive

    - name: 'Setup Go'
      uses: actions/setup-go@v3
      with:
        go-version: '1.20'

    - name: 'Run Terratest'
      working-directory: ./test
      run: |
        go mod init multi-cloud-k8s
        go mod tidy
        go test -v -timeout 30m

  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: 'Run tfsec'
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        soft_fail: true

    - name: 'Run Checkov'
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: terraform
        soft_fail: true

  helm-lint:
    name: 'Helm Lint'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: 'Set up Helm'
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: 'Lint Helm Charts'
      run: |
        for chart in charts/*; do
          if [ -d "$chart" ]; then
            helm lint "$chart"
          fi
        done

  build-portal:
    name: 'Build Self-Service Portal'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: 'Set up Node.js'
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: 'Build Portal'
      working-directory: ./portal
      run: |
        npm install
        npm run build
        npm test

    - name: 'Build and Push Docker Image'
      if: github.ref == 'refs/heads/main'
      run: |
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker build -t ghcr.io/${{ github.repository }}/portal:${{ github.sha }} ./portal
        docker push ghcr.io/${{ github.repository }}/portal:${{ github.sha }}

  deploy:
    name: 'Deploy'
    needs: [validate, security-scan, helm-lint, build-portal]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v3

    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: 'Configure AWS Credentials'
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: 'Configure GCP Credentials'
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: 'Configure Azure Credentials'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Terraform Plan'
      run: |
        terraform init
        terraform plan -out=tfplan

    - name: 'Terraform Apply'
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve tfplan

    - name: 'Deploy Helm Charts'
      if: github.ref == 'refs/heads/main'
      run: |
        helm upgrade --install monitoring ./charts/monitoring --namespace monitoring --create-namespace
        helm upgrade --install portal ./charts/portal --namespace portal --create-namespace \
          --set image.tag=${{ github.sha }}
